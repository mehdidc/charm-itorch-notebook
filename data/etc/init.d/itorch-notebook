#! /bin/sh
### BEGIN INIT INFO
# Provides:          itorch notebook
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Itorch notebook.
# Description:       Starts an itorch notebook with virtualenv support.
### END INIT INFO

# Author: Guido Falk von Rudorff <guido@vonrudorff.de>

DAEMON="itorch"
USER="root"
NAME="itorch-notebook"

for file in `ls /etc/profile.d | grep notebook` 
do
    . /etc/profile.d/${file}
done

. /etc/default/itorch-notebook
if [ "$START" = "0" ] ; then
	echo "itorch-notebook is not configured to start"
	echo "edit /etc/default/itorch-notebook to change behavior"
	exit 0
fi

. /lib/lsb/init-functions
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ "$VIRTUALENV" != "" ]
	then
		source "$VIRTUALENV/bin/activate"
		DAEMON="$VIRTUALENV/bin/$DAEMON"
    else 
        DAEMON="/usr/local/bin/$DAEMON"
	fi
	start-stop-daemon --start --quiet --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --background --start --quiet --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ "$VIRTUALENV" != "" ]
	then
		source "$VIRTUALENV/bin/activate"
		DAEMON="$VIRTUALENV/bin/$DAEMON"
    else 
        DAEMON="/usr/local/bin/$DAEMON"
	fi
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --exec $DAEMON
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
